{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oqrEAAe,G,MAAA,IAA0B,0C,uBCOnCA,EAAiB,iBACjBC,EAAY,8BAA0BD,GAItCE,EAAmB,6CAsIVC,EApIH,WACR,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAwB,uCAAG,kCAAAC,EAAA,2DACRC,OAAbC,EADqB,EACrBA,SADqB,uBAIzBC,QAAQC,IAAI,gCAJa,0BAOzBD,QAAQC,IAAI,gCAAiCF,GAPpB,uBAUNA,EAASG,QAAQ,CAAEC,OAAQ,iBAVrB,OAYL,KAFlBC,EAVuB,QAYhBC,QACHC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,iCAAkCK,GAC9CX,EAAkBW,GAClBC,KAEAP,QAAQC,IAAI,+BAlBa,4CAAH,qDAsBxBO,EAAa,uCAAG,gCAAAX,EAAA,oEAEOC,OAAbC,EAFM,EAENA,SAFM,uBAKVU,MAAM,gCALI,0CASSV,EAASG,QAAQ,CAAEC,OAAQ,iBATpC,OASRC,EATQ,OAUdJ,QAAQC,IAAI,aAAcG,EAAS,IACnCT,EAAkBS,EAAS,IAC3BG,IAZc,kDAcdP,QAAQC,IAAR,MAdc,0DAAH,qDAkBbM,EAAkB,uCAAG,kCAAAV,EAAA,sDAEvB,IAAK,EACoBC,QAAbC,EADR,EACQA,WAIEW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YACE,IAAIJ,IAAOK,SAASzB,EAAkB0B,EAAUC,IAAKJ,GAK7DK,GAAG,oBAAoB,SAACC,EAAMC,GAC5CrB,QAAQC,IAAImB,EAAMC,EAAQC,YAC1Bb,MAAM,kMAAD,OACiMlB,EADjM,YACqN8B,EAAQC,gBAItOtB,QAAQC,IAAI,0BAEZD,QAAQC,IAAI,kCAElB,MAAOsB,GACLvB,QAAQC,IAAIsB,GA1BO,2CAAH,qDA8BlBC,EAAoB,uCAAG,sCAAA3B,EAAA,oEAEAC,SAAbC,EAFa,EAEbA,UAFa,wBAKXW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAASzB,EAAkB0B,EAAUC,IAAKJ,GAE/Ed,QAAQC,IAAI,yCATK,SAUEwB,EAAkBC,gBAVpB,cAUbC,EAVa,OAYjB3B,QAAQC,IAAI,yBAZK,UAcX0B,EAAOC,OAdI,QAgBjB5B,QAAQC,IAAR,kEAAuE0B,EAAOE,OAhB7D,wBAkBjB7B,QAAQC,IAAI,kCAlBK,0DAqBrBD,QAAQC,IAAR,MArBqB,0DAAH,qDAyB1B6B,qBAAU,WACNlC,MACD,IAeH,OACI,qBAAKmC,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,mBAAGA,UAAU,uBAAb,+BACA,mBAAGA,UAAU,WAAb,mEACoB,KAAnBrC,EAjBb,wBAAQsC,QAASxB,EAAeuB,UAAU,mCAA1C,+BAMA,wBAAQC,QAASR,EAAsBO,UAAU,mCAAjD,yBAaQ,sBAAKA,UAAU,mBAAf,UACI,qBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,IACtD,mBAAGJ,UAAU,cAAcK,KAAM9C,EAAc+C,OAAO,SAASC,IAAI,aAAnE,6BAA8FjD,cCtIlHkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e738d872.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css'\nimport twitterLogo from './assets/twitter-logo.svg'\nimport React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport myEpicNft from './utils/MyEpicNFT.json'\n\n// Constants\nconst TWITTER_HANDLE = 'BreadandwaterA'\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`\nconst OPENSEA_LINK = ''\nconst TOTAL_MINT_COUNT = 50\n\nconst CONTRACT_ADDRESS = '0x198CDd721f40a958F47c3E16e1F22A429c62dA05'\n\nconst App = () => {\n    const [currentAccount, setCurrentAccount] = useState('')\n\n    const checkIfWalletIsConnected = async () => {\n        const { ethereum } = window\n\n        if (!ethereum) {\n            console.log('Make sure you have Metamask!')\n            return\n        } else {\n            console.log('We have the ethereum object: ', ethereum)\n        }\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' })\n\n        if (accounts.length !== 0) {\n            const account = accounts[0]\n            console.log('Found and authorized account: ', account)\n            setCurrentAccount(account)\n            setupEventListener()\n        } else {\n            console.log('No authorized account found')\n        }\n    }\n\n    const connectWallet = async () => {\n        try {\n            const { ethereum } = window\n\n            if (!ethereum) {\n                alert('Make sure you have Metamask!')\n                return\n            }\n\n            const accounts = await ethereum.request({ method: 'eth_accounts' })\n            console.log('Connected ', accounts[0])\n            setCurrentAccount(accounts[0])\n            setupEventListener()\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const setupEventListener = async () => {\n        // Most of this looks the same as our function askContractToMintNft\n        try {\n            const { ethereum } = window\n\n            if (ethereum) {\n                // Same stuff again\n                const provider = new ethers.providers.Web3Provider(ethereum)\n                const signer = provider.getSigner()\n                const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer)\n\n                // THIS IS THE MAGIC SAUCE.\n                // This will essentially \"capture\" our event when our contract throws it.\n                // If you're familiar with webhooks, it's very similar to that!\n                connectedContract.on('NewEpicNFTMinted', (from, tokenId) => {\n                    console.log(from, tokenId.toNumber())\n                    alert(\n                        `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n                    )\n                })\n\n                console.log('Setup event listener!')\n            } else {\n                console.log(\"Ethereum object doesn't exist!\")\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const askContractToMintNft = async () => {\n        try {\n            const { ethereum } = window\n\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum)\n                const signer = provider.getSigner()\n                const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer)\n\n                console.log('Going to pop wallet now to pay gas...')\n                let nftTxn = await connectedContract.makeAnEpicNFT()\n\n                console.log('Mining...please wait.')\n\n                await nftTxn.wait()\n\n                console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`)\n            } else {\n                console.log(\"Ethereum object doesn't exist!\")\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        checkIfWalletIsConnected()\n    }, []) // eslint-disable-line\n\n    // Render Methods\n    const renderNotConnectedContainer = () => (\n        <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n            Connect to Wallet\n        </button>\n    )\n\n    const renderMintUI = () => (\n        <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n            Mint NFT\n        </button>\n    )\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <div className=\"header-container\">\n                    <p className=\"header gradient-text\">My NFT Collection</p>\n                    <p className=\"sub-text\">Each unique. Each beautiful. Discover your NFT today.</p>\n                    {currentAccount === '' ? renderNotConnectedContainer() : renderMintUI()}\n                </div>\n                <div className=\"footer-container\">\n                    <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n                    <a className=\"footer-text\" href={TWITTER_LINK} target=\"_blank\" rel=\"noreferrer\">{`built by @${TWITTER_HANDLE}`}</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}